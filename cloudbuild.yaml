steps:
  # Step 1: Build the .NET application
  - name: 'mcr.microsoft.com/dotnet/sdk:8.0'
    id: 'Build'
    entrypoint: 'dotnet'
    args: ['publish', 'backend/backend/backend.csproj', '-c', 'Release', '-o', 'publish']

  # Step 2: Copy the SQL script into the publish directory so it can be sent to the VM
  - name: 'bash'
    id: 'Prepare SQL Script'
    entrypoint: 'bash'
    args: ['-c', 'cp SQLQueryBB.sql publish/']
    waitFor: ['Build']

  # Step 3: Securely prepare files containing the secrets
  - name: 'bash'
    id: 'Prepare Secret Files'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo -n "$$DB_CONN_STRING_SECRET" > publish/connection_string.txt
        echo -n "$$DB_ROOT_PASSWORD_SECRET" > publish/db_password.txt
        echo -n "$$DB_IP_SECRET" > publish/db_ip.txt # New: Write the IP to a file
    secretEnv: ['DB_CONN_STRING_SECRET', 'DB_ROOT_PASSWORD_SECRET', 'DB_IP_SECRET'] # New: Add DB_IP_SECRET
    waitFor: ['Prepare SQL Script']

  # Step 4: A single step to copy files, configure the app, and seed the database from the VM
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy-Configure-and-Seed'
    entrypoint: 'bash'
    args:
      - -c
      - |
        # First, copy the entire 'publish' directory to a temporary location on the VM.
        gcloud compute scp --recurse publish/ $$VM_INSTANCE_NAME_SECRET:/tmp/ --zone=$$VM_ZONE_SECRET

        # Now, prepare the entire script as a single string to pass to SSH.
        # This prevents issues with quoting and command parsing.
        SCRIPT_TO_RUN="
          set -e
          echo '--- Moving application files ---'
          sudo mkdir -p /var/www/backend
          sudo mv /tmp/publish/* /var/www/backend/

          echo '--- Installing Database Tools on VM ---'
          if ! command -v /opt/mssql-tools/bin/sqlcmd &> /dev/null; then
              echo 'sqlcmd not found. Installing now...'
              # Add Microsoft's official package repository for Debian as root
              sudo curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft-prod.gpg
              sudo curl -fsSL https://packages.microsoft.com/config/debian/12/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list > /dev/null
              sudo apt-get update
              sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          else
              echo 'sqlcmd is already installed.'
          fi

          echo '--- Seeding the database from VM ---'
          DB_PASS=\$(sudo cat /var/www/backend/db_password.txt)
          DB_IP=\$(sudo cat /var/www/backend/db_ip.txt)

          /opt/mssql-tools/bin/sqlcmd -S tcp:\$DB_IP,1433 -U sqlserver -P \"\$DB_PASS\" -d Basketball -i /var/www/backend/SQLQueryBB.sql

          echo '--- Cleaning up temporary files ---'
          sudo rm /var/www/backend/db_password.txt
          sudo rm /var/www/backend/db_ip.txt
          sudo rm -rf /tmp/publish
          echo '--- Deployment and Seeding Complete ---'
        "

        # Execute the entire script in a single SSH command
        gcloud compute ssh $$VM_INSTANCE_NAME_SECRET --zone=$$VM_ZONE_SECRET --command="\$SCRIPT_TO_RUN"
    secretEnv: ['VM_INSTANCE_NAME_SECRET', 'VM_ZONE_SECRET']
    waitFor: ['Prepare Secret Files']
 # Frontend Job (runs in parallel with backend)
  - name: 'node:22'
    id: 'Build Frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd frontend
        find src/app/environments -type f -name "environment.prod.ts" -exec sed -i "s|__API_URL_PLACEHOLDER__|http://$$LB_IP_SECRET|g" {} +
        npm install --legacy-peer-deps
        npm install -g @angular/cli
        ng build --configuration=production
    secretEnv: ['FRONTEND_BUCKET_NAME_SECRET', 'LB_IP_SECRET']
    waitFor: ['-']  
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy Frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gsutil -m rsync -r -d frontend/dist/frontend/browser gs://$$FRONTEND_BUCKET_NAME_SECRET/
        
        gsutil -m setmeta -h "Cache-Control:public,max-age=31536000" gs://$$FRONTEND_BUCKET_NAME_SECRET/**/*.js
        gsutil -m setmeta -h "Cache-Control:public,max-age=31536000" gs://$$FRONTEND_BUCKET_NAME_SECRET/**/*.css
        gsutil -m setmeta -h "Cache-Control:no-cache" gs://$$FRONTEND_BUCKET_NAME_SECRET/index.html
    secretEnv: ['FRONTEND_BUCKET_NAME_SECRET']
    waitFor: ['Build Frontend']
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/DB_CONNECTION_STRING/versions/latest
      env: 'DB_CONN_STRING_SECRET'
    - versionName: projects/$PROJECT_ID/secrets/_VM_INSTANCE_NAME/versions/latest
      env: 'VM_INSTANCE_NAME_SECRET'
    - versionName: projects/$PROJECT_ID/secrets/_VM_ZONE/versions/latest
      env: 'VM_ZONE_SECRET'
    - versionName: projects/$PROJECT_ID/secrets/FRONTEND_BUCKET_NAME/versions/latest
      env: 'FRONTEND_BUCKET_NAME_SECRET'
    - versionName: projects/$PROJECT_ID/secrets/LOAD_BALANCER_IP/versions/latest
      env: 'LB_IP_SECRET'
    - versionName: projects/$PROJECT_ID/secrets/DB_ROOT_PASSWORD/versions/latest
      env: 'DB_ROOT_PASSWORD_SECRET'
    - versionName: projects/$PROJECT_ID/secrets/DB_IP/versions/latest
      env: 'DB_IP_SECRET'
options:
  logging: CLOUD_LOGGING_ONLY
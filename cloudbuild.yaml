steps:
  - name: 'mcr.microsoft.com/dotnet/sdk:8.0'
    id: 'Build'
    entrypoint: 'dotnet'
    args: ['publish', 'backend/backend/backend.csproj', '-c', 'Release', '-o', 'publish']

  - name: 'bash'
    id: 'Prepare SQL Script'
    entrypoint: 'bash'
    args: ['-c', 'cp SQLQueryBB.sql publish/']

  - name: 'bash'
    id: 'Prepare Secret Files'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo -n "$$DB_CONN_STRING_SECRET" > publish/connection_string.txt
        echo -n "$$DB_ROOT_PASSWORD_SECRET" > publish/db_password.txt
        echo -n "$$DB_IP_SECRET" > publish/db_ip.txt # New: Write the IP to a file
    secretEnv: ['DB_CONN_STRING_SECRET', 'DB_ROOT_PASSWORD_SECRET', 'DB_IP_SECRET'] # New: Add DB_IP_SECRET

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy-Configure-and-Seed'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud compute scp --recurse publish/ $$VM_INSTANCE_NAME_SECRET:/tmp/ --zone=$$VM_ZONE_SECRET

        gcloud compute ssh $$VM_INSTANCE_NAME_SECRET --zone=$$VM_ZONE_SECRET --command='
          echo "--- Configuring .NET Service ---"
          sudo systemctl stop kestrel-backend.service || true
          sudo mkdir -p /var/www/backend
          sudo rm -rf /var/www/backend/*
          sudo cp -r /tmp/publish/* /var/www/backend/
          sudo chown -R www-data:www-data /var/www/backend

          CONN_STRING=$(sudo cat /var/www/backend/connection_string.txt)

          sudo tee /etc/systemd/system/kestrel-backend.service > /dev/null <<EOF
        [Unit]
        Description=Backend .NET Web API
        [Service]
        WorkingDirectory=/var/www/backend
        ExecStart=/usr/share/dotnet/dotnet /var/www/backend/backend.dll
        Restart=always
        RestartSec=10
        User=www-data
        Environment=ASPNETCORE_ENVIRONMENT=Production
        Environment="ConnectionStrings__BasketballDBConnection=$${CONN_STRING}"
        [Install]
        WantedBy=multi-user.target
        EOF
          
          sudo rm /var/www/backend/connection_string.txt

          sudo systemctl daemon-reload
          sudo systemctl enable kestrel-backend.service
          sudo systemctl start kestrel-backend.service
          sudo systemctl restart nginx || true
          echo "--- .NET Service Started ---"

          echo "--- Installing Database Tools on VM ---"
          sudo apt-get update -y && sudo apt-get install -y curl

          curl -L -o packages-microsoft-prod.deb https://packages.microsoft.com/config/debian/12/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          rm packages-microsoft-prod.deb
          
          sudo apt-get update -y
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev

          echo "--- Seeding the database from VM ---"
          DB_PASS=$(sudo cat /var/www/backend/db_password.txt)
          DB_IP=$(sudo cat /var/www/backend/db_ip.txt) # New: Read the IP from its file

          /opt/mssql-tools/bin/sqlcmd -S tcp:$${DB_IP},1433 -U sqlserver -P "$${DB_PASS}" -d Basketball -i /var/www/backend/SQLQueryBB.sql

          echo "--- Cleaning up temporary files ---"
          sudo rm /var/www/backend/db_password.txt
          sudo rm /var/www/backend/db_ip.txt
          sudo rm -rf /tmp/publish
          echo "--- Deployment and Seeding Complete ---"
        '
    secretEnv: ['VM_INSTANCE_NAME_SECRET', 'VM_ZONE_SECRET']
    waitFor: ['Prepare Secret Files', 'Prepare SQL Script', 'Build']
    
  - name: 'node:22'
    id: 'Build Frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd frontend
        find src/app/environments -type f -name "environment.prod.ts" -exec sed -i "s|__API_URL_PLACEHOLDER__|http://$$LB_IP_SECRET|g" {} +
        npm install --legacy-peer-deps
        npm install -g @angular/cli
        ng build --configuration=production
    secretEnv: ['FRONTEND_BUCKET_NAME_SECRET', 'LB_IP_SECRET']
    waitFor: ['-']  
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy Frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gsutil -m rsync -r -d frontend/dist/frontend/browser gs://$$FRONTEND_BUCKET_NAME_SECRET/
        
        gsutil -m setmeta -h "Cache-Control:public,max-age=31536000" gs://$$FRONTEND_BUCKET_NAME_SECRET/**/*.js
        gsutil -m setmeta -h "Cache-Control:public,max-age=31536000" gs://$$FRONTEND_BUCKET_NAME_SECRET/**/*.css
        gsutil -m setmeta -h "Cache-Control:no-cache" gs://$$FRONTEND_BUCKET_NAME_SECRET/index.html
    secretEnv: ['FRONTEND_BUCKET_NAME_SECRET']
    waitFor: ['Build Frontend']
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/DB_CONNECTION_STRING/versions/latest
      env: 'DB_CONN_STRING_SECRET'
    - versionName: projects/$PROJECT_ID/secrets/_VM_INSTANCE_NAME/versions/latest
      env: 'VM_INSTANCE_NAME_SECRET'
    - versionName: projects/$PROJECT_ID/secrets/_VM_ZONE/versions/latest
      env: 'VM_ZONE_SECRET'
    - versionName: projects/$PROJECT_ID/secrets/FRONTEND_BUCKET_NAME/versions/latest
      env: 'FRONTEND_BUCKET_NAME_SECRET'
    - versionName: projects/$PROJECT_ID/secrets/LOAD_BALANCER_IP/versions/latest
      env: 'LB_IP_SECRET'
    - versionName: projects/$PROJECT_ID/secrets/DB_ROOT_PASSWORD/versions/latest
      env: 'DB_ROOT_PASSWORD_SECRET'
    - versionName: projects/$PROJECT_ID/secrets/DB_IP/versions/latest
      env: 'DB_IP_SECRET'
options:
  logging: CLOUD_LOGGING_ONLY